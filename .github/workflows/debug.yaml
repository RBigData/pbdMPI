
name: Debug Platforms with Package Build
on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to debug on"
        required: true
        type: choice
        options:
          - "ubuntu-latest"
          - "windows-latest"  
          - "macos-latest"
          - "macos-13"
          - "gcc-asan-container"
          - "valgrind-container"
          - "clang-asan-container"
          - "ubuntu-release-container"
      script_path:
        description: "Path to R script to run"
        required: true
        default: "debug-script.R"

jobs:
  debug-with-package:
    runs-on: ${{ contains(github.event.inputs.platform, "container") && "ubuntu-latest" || github.event.inputs.platform }}
    
    # Use container for specialized environments
    container: ${{ 
      github.event.inputs.platform == "gcc-asan-container" && "ghcr.io/r-hub/containers/gcc-asan:latest" || 
      github.event.inputs.platform == "valgrind-container" && "ghcr.io/r-hub/containers/valgrind:latest" ||
      github.event.inputs.platform == "clang-asan-container" && "ghcr.io/r-hub/containers/clang-asan:latest" ||
      github.event.inputs.platform == "ubuntu-release-container" && "ghcr.io/r-hub/containers/ubuntu-release:latest" ||
      null }}
    
    name: "Debug on ${{ github.event.inputs.platform }}"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup R (for GitHub runners)
        if: ${{ !contains(github.event.inputs.platform, "container") }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "release"
          
      - name: Verify R installation (for containers)
        if: ${{ contains(github.event.inputs.platform, "container") }}
        run: |
          echo "R version in container:"
          R --version
          echo "Available packages:"
          R -e "length(available.packages())"
          
      - name: Query dependencies
        run: |
          # Install remotes if not available
          if (!requireNamespace("remotes", quietly = TRUE)) {
            install.packages("remotes")
          }
          
          # Get dependencies from DESCRIPTION
          deps <- remotes::dev_package_deps(dependencies = TRUE)
          print("Package dependencies:")
          print(deps)
          
          # Save for next step
          saveRDS(deps, "deps.rds")
        shell: Rscript {0}
        
      - name: Install system dependencies (Ubuntu/containers)
        if: ${{ runner.os == "Linux" }}
        run: |
          # Update package list
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update
            apt-get install -y \
              libcurl4-openssl-dev \
              libssl-dev \
              libxml2-dev \
              libgit2-dev \
              libharfbuzz-dev \
              libfribidi-dev \
              libfreetype6-dev \
              libpng-dev \
              libtiff5-dev \
              libjpeg-dev \
              libfontconfig1-dev
          elif command -v dnf >/dev/null 2>&1; then
            # For Fedora-based containers
            dnf install -y \
              libcurl-devel \
              openssl-devel \
              libxml2-devel \
              libgit2-devel \
              harfbuzz-devel \
              fribidi-devel \
              freetype-devel \
              libpng-devel \
              libtiff-devel \
              libjpeg-turbo-devel \
              fontconfig-devel
          fi
            
      - name: Install R dependencies
        run: |
          # Read dependencies
          deps <- readRDS("deps.rds")
          
          # Install missing packages
          if (nrow(deps[!deps$installed, ]) > 0) {
            remotes::install_deps(dependencies = TRUE, upgrade = "never")
          }
          
          # Verify installation
          print("Checking package can be loaded:")
          tryCatch({
            devtools::load_all(".")
            cat("✓ Package loaded successfully\n")
          }, error = function(e) {
            cat("✗ Package loading failed:", e$message, "\n")
          })
        shell: Rscript {0}
        
      - name: Build and install package
        run: |
          # Build the package
          devtools::build(path = ".")
          
          # Install the built package
          devtools::install(quick = TRUE, dependencies = FALSE)
          
          # Test that it can be attached
          library(basename(getwd()), character.only = TRUE)
          cat("✓ Package built and installed successfully\n")
        shell: Rscript {0}
        
      - name: Run debugging script
        run: |
          # Source the debugging script with package loaded
          if (file.exists("${{ github.event.inputs.script_path }}")) {
            cat("Running debugging script: ${{ github.event.inputs.script_path }}\n")
            source("${{ github.event.inputs.script_path }}")
          } else {
            cat("Debugging script not found: ${{ github.event.inputs.script_path }}\n")
            cat("Available files:\n")
            print(list.files(recursive = TRUE, pattern = "\\.R$"))
          }
        shell: Rscript {0}
        
      - name: Environment info
        run: |
          cat("=== System Information ===\n")
          print(sessionInfo())
          cat("\n=== Platform Details ===\n")
          print(Sys.info())
          cat("\n=== Package Installation Status ===\n")
          print(installed.packages()[,c("Package", "Version")])
        shell: Rscript {0}

